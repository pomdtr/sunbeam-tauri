name: "Release"

on:
  push:
    branches:
      - master

jobs:
  # create-release:
  #   permissions: write-all
  #   runs-on: ubuntu-20.04
  #   outputs:
  #     release_id: ${{ steps.create-release.outputs.result }}

  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: setup node
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 16
  #     - name: get version
  #       run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
  #     - name: create release
  #       id: create-release
  #       uses: actions/github-script@v6
  #       with:
  #         script: |
  #           const { data } = await github.rest.repos.createRelease({
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             tag_name: `app-v${process.env.PACKAGE_VERSION}`,
  #             name: `Desktop App v${process.env.PACKAGE_VERSION}`,
  #             body: 'Take a look at the assets to download and install this app.',
  #             draft: true,
  #             prerelease: false
  #           })

  #           return data.id

  build-tauri:
    # needs: create-release
    permissions: write-all
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest]
        arch: [x64, arm64]
        exclude:
          - platform: windows-latest
            arch: arm64
          - platform: ubuntu-latest
            arch: arm64

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
      - name: get target
        run: |
          if [ "${{ matrix.platform }}" == "macos-latest" -a "${{ matrix.arch }}" == "x64" ]; then
            echo "TARGET=aarch64-apple-darwin" >> $GITHUB_ENV
          elif [ "${{ matrix.platform }}" == "macos-latest" -a "${{ matrix.arch }}" == "arm64" ]; then
            echo "TARGET=x86_64-apple-darwin" >> $GITHUB_ENV
          fi
      - name: install rust arm64 target
        if: env.TARGET == 'aarch64-apple-darwin'
        run: rustup target add ${{ env.TARGET }}
      - name: install app dependencies
        run: npm install
      - name: build app
        shell: bash
        run: npm run tauri -- build --target ${{ inputs.target }}
      - name: publisn artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.platform }}-${{ matrix.arch }}
          path: src-tauri/target/${{ env.TARGET }}/release/bundle/

  # publish-release:
  #   runs-on: ubuntu-20.04
  #   needs: [create-release, build-tauri]
  #   permissions: write-all

  #   steps:
  #     - name: publish release
  #       id: publish-release
  #       uses: actions/github-script@v6
  #       env:
  #         release_id: ${{ needs.create-release.outputs.release_id }}
  #       with:
  #         script: |
  #           github.rest.repos.updateRelease({
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             release_id: process.env.release_id,
  #             draft: false,
  #             prerelease: false
  #           })
