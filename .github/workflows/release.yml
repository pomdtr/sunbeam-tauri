name: "Release"

on:
  push:
    tags:
      - "v*"

jobs:
  create-release:
    permissions: write-all
    runs-on: ubuntu-20.04
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
      - name: create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `app-v${process.env.PACKAGE_VERSION}`,
              name: `Desktop App v${process.env.PACKAGE_VERSION}`,
              body: 'Take a look at the assets to download and install this app.',
              draft: true,
              prerelease: false
            })

            return data.id

  build-tauri:
    needs: create-release
    permissions: write-all
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-20.04, windows-latest]
        arch: [x64, arm64]
        exclude:
          - platform: windows-latest
            arch: arm64

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
      - name: install rust target (macos only)
        if: matrix.arch == 'arm64' && matrix.platform == 'macos-latest'
        run: |
          rustup target add aarch64-apple-darwin
      - name: install rust target (ubuntu only)
        if: matrix.arch == 'arm64' && matrix.platform == 'ubuntu-20.04'
        run: |
          rustup target add aarch64-unknown-linux-gnu
      - name: install app dependencies and build it
        run: npm install && npm run build
      - uses: tauri-apps/tauri-action@v0
        if: matrix.arch == 'x64'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
      - uses: tauri-apps/tauri-action@v0
        if: matrix.arch == 'arm64' && matrix.platform == 'macos-latest'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: --target aarch64-apple-darwin
      - uses: tauri-apps/tauri-action@v0
        if: matrix.arch == 'arm64' && matrix.platform == 'ubuntu-20.04'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: --target aarch64-unknown-linux-gnu
  publish-release:
    runs-on: ubuntu-20.04
    needs: [create-release, build-tauri]
    permissions: write-all

    steps:
      - name: publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })
